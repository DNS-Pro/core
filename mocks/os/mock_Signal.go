// Code generated by mockery v2.44.1. DO NOT EDIT.

package os

import mock "github.com/stretchr/testify/mock"

// MockSignal is an autogenerated mock type for the Signal type
type MockSignal struct {
	mock.Mock
}

type MockSignal_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSignal) EXPECT() *MockSignal_Expecter {
	return &MockSignal_Expecter{mock: &_m.Mock}
}

// Signal provides a mock function with given fields:
func (_m *MockSignal) Signal() {
	_m.Called()
}

// MockSignal_Signal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signal'
type MockSignal_Signal_Call struct {
	*mock.Call
}

// Signal is a helper method to define mock.On call
func (_e *MockSignal_Expecter) Signal() *MockSignal_Signal_Call {
	return &MockSignal_Signal_Call{Call: _e.mock.On("Signal")}
}

func (_c *MockSignal_Signal_Call) Run(run func()) *MockSignal_Signal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSignal_Signal_Call) Return() *MockSignal_Signal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSignal_Signal_Call) RunAndReturn(run func()) *MockSignal_Signal_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *MockSignal) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSignal_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockSignal_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockSignal_Expecter) String() *MockSignal_String_Call {
	return &MockSignal_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockSignal_String_Call) Run(run func()) *MockSignal_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSignal_String_Call) Return(_a0 string) *MockSignal_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSignal_String_Call) RunAndReturn(run func() string) *MockSignal_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSignal creates a new instance of MockSignal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSignal(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSignal {
	mock := &MockSignal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
